Build1=Default,net.generic.smartcardpuk
File1=MainLayout.bal
File2=ScanLayout.bal
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=core
Library2=javaobject
Library3=newqrcodereaderview
Library4=runtimepermissions
Library5=xui
ManifestCode=~\n~'Application identity~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~~\n~'Application theme~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~~\n~'Support Android 4.4+~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="19" android:targetSdkVersion="32"/>)~\n~~\n~'Support all screen sizes & densities~\n~AddManifestText(~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~~\n~'Require Camera runtime permission (Android 6.0+)~\n~AddManifestText(~\n~<uses-permission android:name="android.permission.CAMERA"/>)~\n~~\n~'Require Flashlight permission~\n~AddPermission(android.permission.FLASHLIGHT)~\n~~\n~'Use Camera feature but it's not required~\n~AddManifestText(~\n~<uses-feature android:name="android.hardware.camera" android:required="false"/>~\n~<uses-feature android:name="android.hardware.camera.front" android:required="false"/>~\n~<uses-feature android:name="android.hardware.camera.any" android:required="false"/>)~\n~~\n~'Add Share To functionality for receiving the Admin Keys~\n~AddActivityText(Main,~\n~<intent-filter>~\n~    <action android:name="android.intent.action.SEND"/>~\n~    <category android:name="android.intent.category.DEFAULT"/>~\n~    <data android:mimeType="text/plain"/>~\n~</intent-filter>)~\n~~\n~'Prevent the App from running in background~\n~RemovePermission(android.permission.FOREGROUND_SERVICE)~\n~~\n~
Module1=|relative|..\Scan
NumberOfFiles=2
NumberOfLibraries=5
NumberOfModules=1
Version=13
@EndOfDesignText@
#Region  Project Attributes 
	'Application identity
	#ApplicationLabel: Android PIN Unblocker
	#VersionCode: 16
	#VersionName: 3.0.0

	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: True
	
	'Compile-time settings
	#BridgeLogger: False
	#MultiDex:     True
	
	'Ignore recommended target SDK warning
	#IgnoreWarnings: 31
	'Ignore function value returns warning
	#IgnoreWarnings: 2
#End Region

#Region  Activity Attributes 
	#FullScreen:   False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These variables can be accessed from all modules.
	'
	Private xui As XUI
	Private NativeMe As JavaObject
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	
	Private inpChallenge   As EditText
	Private btnScanRequest As Button
	
	'Needed to show Admin Key length when counting chars
	Private lblAdminKey As Label
	
	Private inpAdminKey     As EditText
	Private chkHideAdminKey As CheckBox
	
	Private btnGenerate As Button
	Private inpResponse As EditText
	
	Private btnShareResponse As Button
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	
	Activity.LoadLayout("MainLayout")
	
	If FirstTime Then
		'
		'I need to initialize the native Java object context
		'It's for generating the unblock code (native Java code)
		'
		NativeMe.InitializeContext
	End If
	
	'Hide the Admin Key by default
	chkHideAdminKey.Checked  = True
	inpAdminKey.PasswordMode = True
	
	'Show the length of the Admin key
	DisplayAdminKeyLength
	
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	'
	'New nifty feature to hide the Admin Key automatically when switching to another app
	'
	'Useful incase user accidentally exposes it when launching the App and it resumes
	'instead of relaunching from scratch (background task)
	'
	
	'Hide the Admin Key when switching to another app
	chkHideAdminKey.Checked  = True
	inpAdminKey.PasswordMode = True
	
	'Wait a little for Android to update the Recent Apps panel picture
	'Otherwise the Admin Key leaks in the Recent Apps panel picture (thumbnail)
	Sleep(100)
	
End Sub

Sub Activity_Resume
	'
	'Add ability to receive Admin Key with Android's Share To
	'
	
	Dim receivedIntent As Intent = Activity.GetStartingIntent
	
	'Add support for receiving the scanned Challenge Code to Main layout
	If  receivedIntent.Action == receivedIntent.ACTION_EDIT            _
	And receivedIntent.HasExtra("android.intent.extra.CHALLENGE_CODE") Then
		
		inpChallenge.Text = receivedIntent.GetExtra("android.intent.extra.CHALLENGE_CODE")
		Return
	End If
	
	If  receivedIntent.Action == receivedIntent.ACTION_SEND  _
	And receivedIntent.HasExtra("android.intent.extra.TEXT") Then
		
		'Hide the Admin Key by default
		chkHideAdminKey.Checked  = True
		inpAdminKey.PasswordMode = True
		
		'Get the received Admin Key text and remove all invalid hex chars and newlines
		Dim receivedText As String = receivedIntent.GetExtra("android.intent.extra.TEXT")
		receivedText = Regex.Replace2("([^0-9a-f]|\r|\n)", Regex.CASE_INSENSITIVE, receivedText, "")
		
		'
		'Admin Keys can be 48-digits or 32-digits (hex string)
		'
		
		If receivedText <> "" And receivedText.Length >= 32 Then
			'
			'Here we're sure that we atleast have a valid AES-128 Admin Key
			'
			
			'Check if it's actually a DES-EDE (3DES) Admin Key
			If receivedText.Length >= 48 Then
				'
				'Trimming the received Admin Key to proper length if too long
				'
				'This is intentional because I want people to be able to share
				'a full SHA256 or SHA512 hash and trim its length (for convenience)
				'
				receivedText = receivedText.SubString2(0, 48)
			Else
				receivedText = receivedText.SubString2(0, 32)
			End If
			
			'Set the Admin Key text with the received & sanitized data
			inpAdminKey.Text = receivedText
		Else
			'
			'If no valid Admin Key was received
			'
			
			'
			'Set the Admin Key text to empty string (not the default 48-zeroes ADmin Key)
			'
			'It must be emptied or the user might believe that it's the correct one behind the asterisks
			'If the user believes that it's his Admin Key, he might accidentally block his card
			'
			inpAdminKey.Text = ""
			
			'Explain error to the user in Response Code field (not the Admin Key field)
			inpResponse.Hint = "The Admin Key you shared is invalid"
			
		End If
		
		' Show the length of the Admin key
		DisplayAdminKeyLength
		
		'Now the Admin Key will no longer be unhideable if valid (not empty)
		'Useful to prevent accidentally leaking Admin Keys
		
		If inpAdminKey.Text <> "" Then
			chkHideAdminKey.Enabled = False
		End If
		
	Else
		'
		'Don't intercept non-Share To activity resumes, otherwise it wreaks havoc
		'on every Home button press followed by relaunching the App from the Recent Apps panel
		'
		
		'
		'One small exception is for hiding the Admin Key
		'
		
		'Hide the Admin Key when switching back to this App from another one
		chkHideAdminKey.Checked  = True
		inpAdminKey.PasswordMode = True
		
	End If
	
	'Always return a correct ActivityResult
	Activity.SetActivityResult(0, receivedIntent)
	
End Sub

Sub Activity_KeyPress(KeyCode As Int) As Boolean
	
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		
		'Exit the application directly when back key is pressed
		'This prevents the app from running in the background
		ExitApplication()
		
		Return True
	Else
		Return False
	End If
	
End Sub

'
'Helper code
'

Private Sub DisplayAdminKeyLength() As Void
	
	lblAdminKey.Text = "Admin Key:"
	
	If inpAdminKey.Text.Length >= 1 Then
		lblAdminKey.Text = lblAdminKey.Text & " ("&inpAdminKey.Text.Length&" chars)"
	End If
	
End Sub

'
'UI event handlers
'

Private Sub btnScanRequest_Click
	'
	' Fix Camera crashing on Android 6.0+ (crashing when running in emulators)
	' Ask for authorization to use the Camera at runtime
	'
	
	Dim runtimePerms As RuntimePermissions
	
	If runtimePerms.Check(runtimePerms.PERMISSION_CAMERA) <> True Then
		
		runtimePerms.CheckAndRequest(runtimePerms.PERMISSION_CAMERA)
		Wait For Activity_PermissionResult(PermissionIdentifier As String, HavePermission As Boolean)
		
		If HavePermission <> True Then
			ToastMessageShow("Camera access required to scan QR codes", False)
			Return
		End If
		
	End If
	
	'Run the QR scanning activity
	StartActivity(Scan)
	
End Sub

Private Sub inpAdminKey_TextChanged(Old As String, New As String)
	
	'Keep the Admin Key length display updated on text change
	DisplayAdminKeyLength
	
End Sub

Private Sub chkHideAdminKey_CheckedChange(Checked As Boolean)
	
	If Checked == True Then
		inpAdminKey.PasswordMode = True
	Else
		inpAdminKey.PasswordMode = False
	End If
	
End Sub

Private Sub btnGenerate_Click
	
	'Reset the Response Code field before generating a new Response Code
	inpResponse.Text = ""
	
	'
	'Sanitizing inputs
	'
	
	If inpChallenge.Text == "" Or inpAdminKey.Text == "" Then
		
		inpResponse.Hint = "Some input(s) are empty"
		Return
	End If
	
	'Not using RegEx here since I don't want users to send invalid chars in the first place
	'So I don't accept the input at all if there are invalid chars, instead of cleaning them
	'
	Dim sanitizedChallenge As String = inpChallenge.Text .Replace(" ", "").Replace("-", "")
	Dim sanitizedAdminKey  As String = inpAdminKey.Text  .Replace(" ", "").Replace("-", "")
	
	' Allow 32 chars up to 48 chars (some cards have AES-128 Admin Keys, e.g. Crescendo Key or Crescendo C2300)
	' If using AES-128 then the challenge will be 32 chars
	'
	If Regex.IsMatch2("^[0-9a-f]{16,32}$", Regex.CASE_INSENSITIVE, sanitizedChallenge) == False _
	Or Regex.IsMatch2("^[0-9a-f]{32,48}$", Regex.CASE_INSENSITIVE, sanitizedAdminKey)  == False Then
		
		inpResponse.Hint = "Invalid input(s) hex format"
		Return
	End If
	
	' Verify the exact allowed Admin Key lengths (32 and 48 Hex digits)
	If sanitizedAdminKey.Length <> 32 And sanitizedAdminKey.Length <> 48 Then
		
		inpResponse.Hint = "Invalid Admin Key length"
		Return
	End If
	
	' Verify the exact allowed Challenge Code lengths (16 and 32 Hex digits)
	If sanitizedChallenge.Length <> 16 And sanitizedChallenge.Length <> 32 Then
		
		inpResponse.Hint = "Invalid Challenge Code length"
		Return
	End If
	
	' Disallow challenge Code length mismatches with their Admin Keys
	If sanitizedChallenge.Length == 32 And sanitizedAdminKey.Length <> 32 Then
		
		inpResponse.Hint = "Challenge Code requires AES-128 Admin Key"
		Return
		
	Else If sanitizedChallenge.Length == 16 And sanitizedAdminKey.Length <> 48 Then
		
		inpResponse.Hint = "Challenge Code requires DES-EDE Admin Key"
		Return
	End If
	
	'Generate the Response Code using native Java code
	Dim responseCode As String = NativeMe.RunMethod("GenerateResponseCode", Array(sanitizedChallenge, sanitizedAdminKey))
	
	'Cans be tweaked to have separators if needed (4x4)
	'
	If responseCode.Length == 16 Then
		inpResponse.Text = Regex.Replace2("^([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})$", Regex.CASE_INSENSITIVE, responseCode, "$1 $2 $3 $4")
	Else If responseCode.Length == 32 Then
		inpResponse.Text = Regex.Replace2("^([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})$", Regex.CASE_INSENSITIVE, responseCode, "$1 $2 $3 $4 $5 $6 $7 $8")
	End If
	
End Sub

Private Sub btnShareResponse_Click
	
	Dim shareIntent As Intent
	shareIntent.Initialize(shareIntent.ACTION_SEND, "")
	
	shareIntent.SetType("text/plain")
	shareIntent.PutExtra("android.intent.extra.TEXT", inpResponse.Text)
	
	shareIntent.WrapAsIntentChooser("Share The Response Code")
	StartActivity(shareIntent)
	
End Sub

'
' Unused code
'

'
'
'Unused code goes here
'
'

'
'Native code
'

#If JAVA

import javax.crypto.Cipher;
import java.security.spec.InvalidParameterSpecException;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;

import javax.crypto.spec.SecretKeySpec;

import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.DESedeKeySpec;

import java.security.InvalidAlgorithmParameterException;
import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.NoSuchAlgorithmException;

//
// NoSuchAlgorithmException, InvalidKeyException
//

public String GenerateResponseCode(final String challengeCode, final String adminKey) throws Exception {
	
    byte[] challengeCodeBytes = HexToolFromString(challengeCode);
	byte[] adminKeyBytes      = HexToolFromString(adminKey);
	
	byte[] responseCodeBytes;
	
	if ( adminKey.length() == 32 && challengeCode.length() == 32 )
	{
		// Reversed from HID Crescendo Management Tool V2.0
		//
		final SecretKey generatedAesKey = new SecretKeySpec(adminKeyBytes, "AES");
		
		final Cipher aesInstance = Cipher.getInstance("AES/ECB/NoPadding");
		aesInstance.init(1, generatedAesKey);
		
		responseCodeBytes = aesInstance.doFinal(challengeCodeBytes);
	}
	else
	{
		// Reversed from Crescendo C1150 Card Unblock Utility
		//
		final SecretKeyFactory skf = SecretKeyFactory.getInstance("DESede");
	    final SecretKey generatedDesEdeSecret = skf.generateSecret(new DESedeKeySpec(adminKeyBytes));
		
	    final Cipher desEdeInstance = Cipher.getInstance("DESede/ECB/NoPadding");
	    desEdeInstance.init(1, generatedDesEdeSecret);
		
		responseCodeBytes = desEdeInstance.doFinal(challengeCodeBytes);
	}
	
	return HexToolToString(responseCodeBytes);
}

//
// Reversed from Crescendo C1150 Card Unblock Utility
//

public byte[] HexToolFromString(final String s) {
	
    final int length   = s.length();
    final byte[] array = new byte[(length + 1) / 2];
	
    int i = 0;
    int n = 0;
	
    if ( length % 2 == 1 )
	{
        array[n++] = (byte)HexToolFromDigit(s.charAt(i++));
    }
	
    while ( i < length )
	{
        array[n++] = (byte)(HexToolFromDigit(s.charAt(i++)) << 4 | HexToolFromDigit(s.charAt(i++)));
    }
	
    return array;
}

public int HexToolFromDigit(final char c)
{
	
    if ( c >= '0' && c <= '9' )
	{
        return c - '0'; // 0x30
    }
	
    if ( c >= 'A' && c <= 'F' )
	{
        return c - 'A' + 10; // 0x41
    }
	
    if ( c >= 'a' && c <= 'f' )
	{
        return c - 'a' + 10; // 0x61
    }
	
	return 0;
}

public String HexToolToString(final byte[] array)
{
    return HexToolToStringTwo(array, 0, array.length);
}

public String HexToolToStringTwo(final byte[] array, final int n, final int n2)
{
	char[] HexToolHexDigits = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
	
    final char[] value = new char[n2 * 2];
    int n3 = 0;
	
    for ( int i = n; i < n + n2; ++i )
	{
        final byte b = array[i];
        value[n3++] = HexToolHexDigits[b >>> 4 & 0xF];
        value[n3++] = HexToolHexDigits[b & 0xF];
    }
	
    return new String(value);
}

#End If


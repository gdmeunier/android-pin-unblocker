Build1=Default,net.generic.smartcardpuk
File1=Layout.bal
FileGroup1=Default Group
Group=Default Group
Library1=core
Library2=javaobject
Library3=xui
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="33"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~'End of default text.~\n~~\n~' Add Share To functionality for receiving data~\n~AddActivityText(Main,~\n~<intent-filter>~\n~    <action android:name="android.intent.action.SEND"/>~\n~    <category android:name="android.intent.category.DEFAULT"/>~\n~    <data android:mimeType="text/plain"/>~\n~</intent-filter>)~\n~~\n~
Module1=Starter
NumberOfFiles=1
NumberOfLibraries=3
NumberOfModules=1
Version=12.5
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Android PIN Unblocker
	#VersionCode: 5
	#VersionName: 1.3.1
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: True
	
	#BridgeLogger: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

#If JAVA

import javax.crypto.Cipher;
import java.security.spec.InvalidParameterSpecException;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;

import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.DESedeKeySpec;
import java.security.InvalidAlgorithmParameterException;

import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.NoSuchAlgorithmException;

#End If

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
	Private NativeMe As JavaObject
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	
	Private inpChallenge As EditText
	Private inpAdminKey As EditText
	
	Private chkPasswordMode As CheckBox
	Private inpResponse As EditText
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("Layout")
	
	If FirstTime Then
		NativeMe.InitializeContext
	End If
	
	'Hide the Admin Key by default, better for adding the 'Share To' function later on
	chkPasswordMode.Checked = True
	inpAdminKey.PasswordMode = True
	
End Sub

Sub Activity_Pause (UserClosed As Boolean)
End Sub

Sub Activity_Resume
	Dim intReceivedIntent As Intent = Activity.GetStartingIntent
	
	If  intReceivedIntent.Action == intReceivedIntent.ACTION_SEND _
	And intReceivedIntent.HasExtra("android.intent.extra.TEXT") Then
		
		'Hide the Admin Key by default is required as a precaution when 'Sharing To' the App
		chkPasswordMode.Checked = True
		chkPasswordMode.Enabled = False
		
		inpAdminKey.PasswordMode = True
		
		'All text share intents have the text in ExtraData, not Data
		Dim receivedData As String = intReceivedIntent.GetExtra("android.intent.extra.TEXT")
		receivedData = Regex.Replace2("^[^0-9a-f]$", Regex.CASE_INSENSITIVE, receivedData, "")
		
		If receivedData <> "" And receivedData.Length >= 48 Then
			receivedData = receivedData.SubString2(0, 48)
			
			'Set the Admin Key text with the received & sanitized data
			inpAdminKey.Text = receivedData
		End If
		
	End If
	
	'Always return a correct ActivityResult
	Activity.SetActivityResult(0, intReceivedIntent)
	
End Sub

Private Sub btnShareResponse_Click
	Dim ResponseShareIntent As Intent
	
	ResponseShareIntent.Initialize(ResponseShareIntent.ACTION_SEND, "")
	
	ResponseShareIntent.SetType("text/plain")
	ResponseShareIntent.PutExtra("android.intent.extra.TEXT", inpResponse.Text)
	
	ResponseShareIntent.WrapAsIntentChooser("Share The Response Code")
	StartActivity(ResponseShareIntent)
	
End Sub

Private Sub chkPasswordMode_CheckedChange(Checked As Boolean)
	
	If Checked == True Then
		inpAdminKey.PasswordMode = True
	Else
		inpAdminKey.PasswordMode = False
	End If
	
End Sub

Sub btnGenerate_Click
	'
	'NativeMe.RunMethod("GenerateUnblockPin", Null)
	'NativeMe.Runmethod("GenerateUnblockPin",Array("String1","String2"))
	'
	'xui.MsgboxAsync("Unblock PIN:" & strUnblockPin, "Generated Code")
	'
	'FFFF-FFFF-FFFF-FFFF
	'000000000000000000000000000000000000000000000000
	'3555-50B2-150E-2451
	'
	'0123-4567-89AB-CDEF
	'
	
	If inpChallenge.Text == Null Or inpAdminKey.Text == Null Then
		inpResponse.Text = "No input(s) provided."
		Return
	End If
	
	If inpChallenge.Text == "" Or inpAdminKey.Text == "" Then
		inpResponse.Text = "Empty input(s) provided."
		Return
	End If
	
	Dim sanitizedChallenge As String = inpChallenge.Text.Replace(" ", "").Replace("-", "")
	Dim sanitizedAdminKey  As String = inpAdminKey.Text.Replace(" ", "").Replace("-", "")
	
	' Allow 42 chars upto 48 chars (some cards have nonstandard Admin keys)
	If Regex.IsMatch2("^[0-9a-f]{16}$",    Regex.CASE_INSENSITIVE, sanitizedChallenge) == False _
	Or Regex.IsMatch2("^[0-9a-f]{42,48}$", Regex.CASE_INSENSITIVE, sanitizedAdminKey)  == False Then
		inpResponse.Text = "Invalid input(s) format."
		Return
	End If
	
	Dim unblockPin As String = NativeMe.Runmethod("GenerateUnblockPin", Array(sanitizedChallenge, sanitizedAdminKey))
	
	'Cans be tweaked to have separators if needed (4x4)
	inpResponse.Text = Regex.Replace2("^([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})$", Regex.CASE_INSENSITIVE, unblockPin, "$1 $2 $3 $4")
	
	'Debug facilities
	'Log("Logger: " & sanitizedChallenge)
	'Log("Logger: " & sanitizedAdminKey)
	
End Sub

#If JAVA

//
// NoSuchAlgorithmException, InvalidKeyException
//

public String GenerateUnblockPin(final String challengeCode, final String adminKey) throws Exception {
	
	String sanitizedChallengeCode = challengeCode.replace("-", "").replace(" ", "");
	
    byte[] challengeCodeBytes     = HexToolFromString(sanitizedChallengeCode);
	
	final SecretKeyFactory skf = SecretKeyFactory.getInstance("DESede");
	
    final SecretKey generatedSecret = skf.generateSecret(new DESedeKeySpec(HexToolFromString(adminKey)));
    final Cipher desEdeInstance     = Cipher.getInstance("DESede/ECB/NoPadding");
	
    desEdeInstance.init(1, generatedSecret);
	
	byte[] temporary = desEdeInstance.doFinal(challengeCodeBytes);
	
	return HexToolToString(temporary);
}

public byte[] HexToolFromString(final String s) {
	
    final int length   = s.length();
    final byte[] array = new byte[(length + 1) / 2];
	
    int i = 0;
    int n = 0;
	
    if ( length % 2 == 1 )
	{
        array[n++] = (byte)HexToolFromDigit(s.charAt(i++));
    }
	
    while ( i < length )
	{
        array[n++] = (byte)(HexToolFromDigit(s.charAt(i++)) << 4 | HexToolFromDigit(s.charAt(i++)));
    }
	
    return array;
}

public int HexToolFromDigit(final char c)
{
	
    if ( c >= '0' && c <= '9' )
	{
        return c - '0'; // 0x30
    }
	
    if ( c >= 'A' && c <= 'F' )
	{
        return c - 'A' + 10; // 0x41
    }
	
    if ( c >= 'a' && c <= 'f' )
	{
        return c - 'a' + 10; // 0x61
    }
	
	return 0;
}

public String HexToolToString(final byte[] array)
{
    return HexToolToStringTwo(array, 0, array.length);
}

public String HexToolToStringTwo(final byte[] array, final int n, final int n2)
{
	char[] HexToolHexDigits = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
	
    final char[] value = new char[n2 * 2];
    int n3 = 0;
	
    for ( int i = n; i < n + n2; ++i )
	{
        final byte b = array[i];
        value[n3++] = HexToolHexDigits[b >>> 4 & 0xF];
        value[n3++] = HexToolHexDigits[b & 0xF];
    }
	
    return new String(value);
}

#End If


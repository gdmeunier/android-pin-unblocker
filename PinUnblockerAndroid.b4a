Build1=Default,net.generic.smartcardpuk
File1=MainLayout.bal
File2=ScanChallenge.bal
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=core
Library2=javaobject
Library3=newqrcodereaderview
Library4=xui
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="33"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~~\n~AddManifestText(~\n~<uses-permission android:name="android.permission.CAMERA"/>)~\n~AddManifestText(~\n~<uses-feature android:name="android.hardware.camera" android:required="false"/>~\n~<uses-feature android:name="android.hardware.camera.front" android:required="false"/>)~\n~' Avoid asking for the camera if user doesn't have any (app works anyway without QR)~\n~AddManifestText(~\n~<uses-feature android:name="android.hardware.camera.any" android:required="false"/>)~\n~~\n~'AddApplicationText(<application android:requestLegacyExternalStorage="true"/>)~\n~~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~'End of default text.~\n~~\n~' Add Share To functionality for receiving data~\n~AddActivityText(Main,~\n~<intent-filter>~\n~    <action android:name="android.intent.action.SEND"/>~\n~    <category android:name="android.intent.category.DEFAULT"/>~\n~    <data android:mimeType="text/plain"/>~\n~</intent-filter>)~\n~~\n~'Add support for scanning the Request Code~\n~'Remove unnecessary permission line (already added by NewQRCodeView)~\n~AddPermission(android.permission.CAMERA)~\n~AddPermission(android.permission.FLASHLIGHT)~\n~~\n~'Fix the foreground service issue (app still running)~\n~RemovePermission(android.permission.FOREGROUND_SERVICE)~\n~~\n~
NumberOfFiles=2
NumberOfLibraries=4
NumberOfModules=0
Version=12.5
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Android PIN Unblocker
	#VersionCode: 10
	#VersionName: 1.6.1
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: True
	
	#BridgeLogger: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

' Changelog (starting at 1.3.0)

' 1.6.1 :: (x) Fixed the ability to use 32-digits Admin keys (algorithm changed to AES-128, no DESede)
'          (x) Reworked the Scan Challenge window layout to accomodate larger challenge codes and
'              Admin keys (up to 32-chars challenge codes)
'
' 1.6.0 :: (+) Added the ability to use 32-digits Admin keys (for some HID Crescendo cards)
'              It's now allowed to use 32-digits, 42-digits & 48-digits Admin keys
'
' 1.5.0 :: (+) Added the ability to switch between the front and back cameras of real Android phones
'          (x) Fixed main layout's 'Android PIN Unblocker' and 'Scan Challenge' text paddings
'
' 1.4.1 :: (x) Fixed the Share To behavior when sharing Admin key to Android PIN Unblocker to the
'              intended one (being able to also share 42-digits Admin keys instead of only 48-digits)
'
'          (+) Added portrait-only display attribute to force portrait orientation while the App is running
'
'          (x) Optimized the behavior of the UI layout loading & hiding functions to minimize unnecessary
'              layout reveals & hidings
'
'          (x) Fixed the btnScanRequest_Click function for QR codes by adding setBackCamera() prior to
'              loading the QR scanner preview (trying to make it work on Android emulators)
'
'              * It still works well with real Android devices though
'
'          (x) Increased QR code's scan autofocus interval to 1000ms instead of 500ms
'          (x) Optimized the order of functions in the QR code back button, result_found & for showing it
'
'          (x) Removed unnecessary challengeCode sanitization in the Java native function for generating
'              the unblockPin since I already do it in btnGenerateRequest_Click()
'
' 1.4.0 :: (+) Added the ability to scan QR codes (requires more permissions, camera + flashlight)
'          (x) Fixed the XUI layout of the Main UI & Scan Challenge one to better fit many display DPIs
'          (x) Fixed remnant background service by deleting Starter.bas
'          (x) Removed leftover code variable display in error output for invalid challenge format

#If JAVA

import javax.crypto.Cipher;
import java.security.spec.InvalidParameterSpecException;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;

// Add AES-128 Admin keys support (32-digits)
import javax.crypto.spec.SecretKeySpec;

import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.DESedeKeySpec;
import java.security.InvalidAlgorithmParameterException;

import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.NoSuchAlgorithmException;

#End If

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
	Private NativeMe As JavaObject
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	
	Private inpChallenge As EditText
	Private inpAdminKey As EditText
	
	Private chkPasswordMode As CheckBox
	Private inpResponse As EditText
	
	'Add support for scanning the Request Code
	Private btnScanRequest As Button
	
	'Add support for scanning the Request Code
	Private qrReaderView As NewQRCodeReaderView
	
	Private btnToggleCameraSide As Button
	Private btnToggleFlashlight As Button
	
	Private isBackCamera As Boolean
	Private isTorchEnabled As Boolean
	Private isScanInProgress As Boolean
	
	Private btnGoBack As Button
	
	'Misc elements of the UI for hiding views
	Private lblChallenge As Label
	Private lblAdminKey As Label
	Private btnGenerate As Button
	Private lblResponse As Label
	Private btnShareResponse As Button
	
	'Misc elements of the UI for hiding views
	Private lblScanChallenge As Label
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	
	'Faster method for loading then hiding Scan Challenge UI
	'This way no need go explicitly show the Main UI
	Activity.LoadLayout("ScanChallenge")
	SetScanLayout(False)
	Activity.LoadLayout("MainLayout")
	
	Activity.Title = "Android PIN Unblocker"
	
	If FirstTime Then
		NativeMe.InitializeContext
	End If
	
	'Hide the Admin Key by default, better for adding the 'Share To' function later on
	chkPasswordMode.Checked = True
	inpAdminKey.PasswordMode = True
	
End Sub

Sub SetMainLayout(Show As Boolean)
	
	lblChallenge.Visible = Show
	inpChallenge.Visible = Show
	btnScanRequest.Visible = Show
	
	lblAdminKey.Visible = Show
	inpAdminKey.Visible = Show
	chkPasswordMode.Visible = Show
	
	btnGenerate.Visible = Show
	
	lblResponse.Visible = Show
	inpResponse.Visible = Show
	btnShareResponse.Visible = Show
	
	If Show Then
		Activity.Title = "Android PIN Unblocker"
	End If
	
End Sub

Sub SetScanLayout(Show As Boolean)
	
	lblScanChallenge.Visible = Show
	qrReaderView.Visible = Show
	
	btnToggleCameraSide.Visible = Show
	btnToggleFlashlight.Visible = Show
	btnGoBack.Visible = Show
	
	If Show Then
		Activity.Title = "Scan Challenge"
	End If
	
End Sub

Sub Activity_KeyPress(KeyCode As Int) As Boolean
	
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		
		If isScanInProgress Then
			SetScanLayout(False)
			SetMainLayout(True)
			
			isBackCamera = True
			isScanInProgress = False
		Else
			ExitApplication()
		End If
		
		Return True
	Else
		Return False
	End If
	
End Sub

Private Sub btnToggleCameraSide_Click
	
	isScanInProgress = False
	
	qrReaderView.stopCamera()
	qrReaderView.ScanNow = False
	
	qrReaderView.Visible = False
	
	qrReaderView.TorchEnabled = isTorchEnabled
	qrReaderView.QRDecodingEnabled = True
	qrReaderView.AutofocusInterval = 1000
	qrReaderView.ResultPointColor = Colors.Red
	
	isBackCamera = Not(isBackCamera)
	
	If isBackCamera Then
		qrReaderView.PreviewCameraId = 0
		qrReaderView.setBackCamera()
	Else
		qrReaderView.PreviewCameraId = 1
		qrReaderView.setFrontCamera()
	End If
	
	qrReaderView.Visible = True
	isScanInProgress = True
	
	qrReaderView.ScanNow = True
	qrReaderView.startCamera()
	
End Sub

Private Sub btnToggleFlashlight_Click
	
	isTorchEnabled = Not(isTorchEnabled)
	qrReaderView.TorchEnabled = isTorchEnabled
	
End Sub

Private Sub btnGoBack_Click
	
	qrReaderView.stopCamera()
	qrReaderView.ScanNow = False
	
	SetScanLayout(False)
	SetMainLayout(True)
	
	isBackCamera = True
	
	isTorchEnabled = False
	qrReaderView.TorchEnabled = isTorchEnabled
	
	isScanInProgress = False
	
End Sub

Private Sub btnScanRequest_Click

	isScanInProgress = True
	
	'Always back camera first
	isBackCamera = True
	
	isTorchEnabled = False
	qrReaderView.TorchEnabled = isTorchEnabled
	
	qrReaderView.QRDecodingEnabled = True
	qrReaderView.AutofocusInterval = 1000
	qrReaderView.ResultPointColor = Colors.Red
	
	qrReaderView.PreviewCameraId = 0
	qrReaderView.setBackCamera()
	qrReaderView.PreviewCameraId = 1
	qrReaderView.setFrontCamera()
	
	'Always back camera first
	qrReaderView.PreviewCameraId = 0
	qrReaderView.setBackCamera()
	
	SetMainLayout(False)
	
	qrReaderView.ScanNow = True
	qrReaderView.startCamera()
	
	SetScanLayout(True)
	
End Sub

Private Sub qrReaderView_result_found(ReturnValue As String)
	
	qrReaderView.stopCamera()
	qrReaderView.ScanNow = False
	
	SetScanLayout(False)
	SetMainLayout(True)
	
	inpChallenge.Text = ReturnValue
	
	'Always back camera (even when exiting)
	isBackCamera = True
	
	isTorchEnabled = False
	qrReaderView.TorchEnabled = isTorchEnabled
	
	isScanInProgress = False
	
End Sub

Sub Activity_Pause (UserClosed As Boolean)
End Sub

Sub Activity_Resume
	Dim intReceivedIntent As Intent = Activity.GetStartingIntent
	
	If  intReceivedIntent.Action == intReceivedIntent.ACTION_SEND _
	And intReceivedIntent.HasExtra("android.intent.extra.TEXT") Then
		
		'Hide the Admin Key by default is required as a precaution when 'Sharing To' the App
		chkPasswordMode.Checked = True
		chkPasswordMode.Enabled = False
		
		inpAdminKey.PasswordMode = True
		
		'All text share intents have the text in ExtraData, not Data
		Dim receivedData As String = intReceivedIntent.GetExtra("android.intent.extra.TEXT")
		receivedData = Regex.Replace2("^[^0-9a-f]$", Regex.CASE_INSENSITIVE, receivedData, "")
		
		'Admin Keys can be 32-digits or 42-digits too (hex)
		If receivedData <> "" And (receivedData.Length >= 32) Then
			
			'Admin Keys can be 32-digits or 42-digits too (hex)
			If receivedData.Length >= 48 Then
				receivedData = receivedData.SubString2(0, 48)
			Else If receivedData.Length >= 42 And receivedData.Length < 48 Then
				receivedData = receivedData.SubString2(0, 42)
			Else
				receivedData = receivedData.SubString2(0, 32)
			End If
			
			'Set the Admin Key text with the received & sanitized data
			inpAdminKey.Text = receivedData
		End If
		
	End If
	
	'Always return a correct ActivityResult
	Activity.SetActivityResult(0, intReceivedIntent)
	
End Sub

Private Sub btnShareResponse_Click
	Dim ResponseShareIntent As Intent
	
	ResponseShareIntent.Initialize(ResponseShareIntent.ACTION_SEND, "")
	
	ResponseShareIntent.SetType("text/plain")
	ResponseShareIntent.PutExtra("android.intent.extra.TEXT", inpResponse.Text)
	
	ResponseShareIntent.WrapAsIntentChooser("Share The Response Code")
	
	StartActivity(ResponseShareIntent)
	
End Sub

Private Sub chkPasswordMode_CheckedChange(Checked As Boolean)
	
	If Checked == True Then
		inpAdminKey.PasswordMode = True
	Else
		inpAdminKey.PasswordMode = False
	End If
	
End Sub

Private Sub btnGenerate_Click
	'
	'NativeMe.RunMethod("GenerateUnblockPin", Null)
	'NativeMe.RunMethod("GenerateUnblockPin", Array("String1", "String2"))
	'
	'xui.MsgboxAsync("Unblock PIN:" & strUnblockPin, "Generated Code")
	'
	
	If inpChallenge.Text == Null Or inpAdminKey.Text == Null Then
		inpResponse.Text = "No input(s) provided."
		Return
	End If
	
	If inpChallenge.Text == "" Or inpAdminKey.Text == "" Then
		inpResponse.Text = "Empty input(s) provided."
		Return
	End If
	
	Dim sanitizedChallenge As String = inpChallenge.Text.Replace(" ", "").Replace("-", "")
	Dim sanitizedAdminKey  As String = inpAdminKey.Text.Replace(" ", "").Replace("-", "")
	
	' Allow 32 chars upto 48 chars (some cards have nonstandard Admin keys)
	' If using AES-128 then the challenge will be 16 bytes (32 chars)
	'
	If Regex.IsMatch2("^[0-9a-f]{16,32}$",    Regex.CASE_INSENSITIVE, sanitizedChallenge) == False _
	Or Regex.IsMatch2("^[0-9a-f]{32,48}$", Regex.CASE_INSENSITIVE, sanitizedAdminKey)  == False Then
		inpResponse.Text = "Invalid input(s) format."
		Return
	End If
	
	' Verify the exact allowed Admin key lengths (32, 42, 48)
	If sanitizedAdminKey.Length <> 32 And sanitizedAdminKey.Length <> 42 And sanitizedAdminKey.Length <> 48 Then
		inpResponse.Text = "Invalid Admin Key length."
		Return
	End If
	
	' Verify the exact allowed challenge code lengths (16 & 32)
	If sanitizedChallenge.Length <> 16 And sanitizedChallenge.Length <> 32 Then
		inpResponse.Text = "Invalid Challenge Code length."
		Return
	End If
	
	' Disallow challenge code length mismatches with their Admin keys
	If sanitizedChallenge.Length == 32 And sanitizedAdminKey.Length <> 32 Then
		inpResponse.Text = "Mismatched AES-128 Admin Key format."
		Return
	Else If sanitizedChallenge.Length == 16 And (sanitizedAdminKey.Length <> 42 And sanitizedAdminKey.Length <> 48) Then
		inpResponse.Text = "Mismatched DES-EDE Admin Key format."
		Return
	End If
	
	Dim unblockPin As String = NativeMe.Runmethod("GenerateUnblockPin", Array(sanitizedChallenge, sanitizedAdminKey))
	
	'Cans be tweaked to have separators if needed (4x4)
	'
	If unblockPin.Length == 16 Then
		inpResponse.Text = Regex.Replace2("^([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})$", Regex.CASE_INSENSITIVE, unblockPin, "$1 $2 $3 $4")
	Else If unblockPin.Length == 32 Then
		inpResponse.Text = Regex.Replace2("^([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})([a-f0-9]{4})$", Regex.CASE_INSENSITIVE, unblockPin, "$1 $2 $3 $4 $5 $6 $7 $8")
	End If
	
End Sub

#If JAVA

//
// NoSuchAlgorithmException, InvalidKeyException
//

public String GenerateUnblockPin(final String challengeCode, final String adminKey) throws Exception {
	
	// String sanitizedChallengeCode = challengeCode.replace("-", "").replace(" ", "");
	
	// No need to redo the challengeCode sanitization since I already did with btnGenerateResponse_Click()
    byte[] challengeCodeBytes = HexToolFromString(challengeCode);
	byte[] adminKeyBytes      = HexToolFromString(adminKey);
	
	//
	// Add support for 32-digits Admin keys (AES-128 algorithm)
	//
	
	byte[] temporary;
	
	// 32-chars Admin key is AES-128 so the challenge code must be 16 bytes (32-chars too)
	if ( adminKey.length() == 32 && challengeCode.length() == 32 )
	{
		final SecretKey generatedAesKey = new SecretKeySpec(adminKeyBytes, "AES");
		
		final Cipher aesInstance = Cipher.getInstance("AES/ECB/NoPadding");
		aesInstance.init(1, generatedAesKey);
		
		temporary = aesInstance.doFinal(challengeCodeBytes);
	}
	// For DES-EDE the challenge code is 8 bytes (16-chars)
	else
	{
		final SecretKeyFactory skf = SecretKeyFactory.getInstance("DESede");
	    final SecretKey generatedDesEdeSecret = skf.generateSecret(new DESedeKeySpec(adminKeyBytes));
		
	    final Cipher desEdeInstance = Cipher.getInstance("DESede/ECB/NoPadding");
	    desEdeInstance.init(1, generatedDesEdeSecret);
		
		temporary = desEdeInstance.doFinal(challengeCodeBytes);
	}
	
	return HexToolToString(temporary);
}

public byte[] HexToolFromString(final String s) {
	
    final int length   = s.length();
    final byte[] array = new byte[(length + 1) / 2];
	
    int i = 0;
    int n = 0;
	
    if ( length % 2 == 1 )
	{
        array[n++] = (byte)HexToolFromDigit(s.charAt(i++));
    }
	
    while ( i < length )
	{
        array[n++] = (byte)(HexToolFromDigit(s.charAt(i++)) << 4 | HexToolFromDigit(s.charAt(i++)));
    }
	
    return array;
}

public int HexToolFromDigit(final char c)
{
	
    if ( c >= '0' && c <= '9' )
	{
        return c - '0'; // 0x30
    }
	
    if ( c >= 'A' && c <= 'F' )
	{
        return c - 'A' + 10; // 0x41
    }
	
    if ( c >= 'a' && c <= 'f' )
	{
        return c - 'a' + 10; // 0x61
    }
	
	return 0;
}

public String HexToolToString(final byte[] array)
{
    return HexToolToStringTwo(array, 0, array.length);
}

public String HexToolToStringTwo(final byte[] array, final int n, final int n2)
{
	char[] HexToolHexDigits = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
	
    final char[] value = new char[n2 * 2];
    int n3 = 0;
	
    for ( int i = n; i < n + n2; ++i )
	{
        final byte b = array[i];
        value[n3++] = HexToolHexDigits[b >>> 4 & 0xF];
        value[n3++] = HexToolHexDigits[b & 0xF];
    }
	
    return new String(value);
}

#End If

